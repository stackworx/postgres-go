// Code generated by gnorm, DO NOT EDIT!

package generated

import (
	"database/sql"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/pgtype"
	"github.com/lib/pq"
	"github.com/lib/pq/hstore"
)

// JsonbField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type JsonbField string

// Equals returns a WhereClause for this field.
func (f JsonbField) Equals(v Jsonb) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f JsonbField) GreaterThan(v Jsonb) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f JsonbField) LessThan(v Jsonb) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f JsonbField) GreaterOrEqual(v Jsonb) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f JsonbField) LessOrEqual(v Jsonb) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f JsonbField) NotEqual(v Jsonb) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f JsonbField) In(vals []Jsonb) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// IntField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type IntField string

// Equals returns a WhereClause for this field.
func (f IntField) Equals(v int) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f IntField) GreaterThan(v int) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f IntField) LessThan(v int) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f IntField) GreaterOrEqual(v int) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f IntField) LessOrEqual(v int) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f IntField) NotEqual(v int) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f IntField) In(vals []int) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// Int32Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Int32Field string

// Equals returns a WhereClause for this field.
func (f Int32Field) Equals(v int32) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Int32Field) GreaterThan(v int32) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Int32Field) LessThan(v int32) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Int32Field) GreaterOrEqual(v int32) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Int32Field) LessOrEqual(v int32) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Int32Field) NotEqual(v int32) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f Int32Field) In(vals []int32) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// StringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type StringField string

// Equals returns a WhereClause for this field.
func (f StringField) Equals(v string) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f StringField) GreaterThan(v string) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f StringField) LessThan(v string) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f StringField) GreaterOrEqual(v string) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f StringField) LessOrEqual(v string) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f StringField) NotEqual(v string) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f StringField) In(vals []string) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullStringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullStringField string

// Equals returns a WhereClause for this field.
func (f SqlNullStringField) Equals(v sql.NullString) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullStringField) GreaterThan(v sql.NullString) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullStringField) LessThan(v sql.NullString) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullStringField) GreaterOrEqual(v sql.NullString) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullStringField) LessOrEqual(v sql.NullString) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullStringField) NotEqual(v sql.NullString) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullStringField) In(vals []sql.NullString) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// Int64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Int64Field string

// Equals returns a WhereClause for this field.
func (f Int64Field) Equals(v int64) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Int64Field) GreaterThan(v int64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Int64Field) LessThan(v int64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Int64Field) GreaterOrEqual(v int64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Int64Field) LessOrEqual(v int64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Int64Field) NotEqual(v int64) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f Int64Field) In(vals []int64) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullInt64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullInt64Field string

// Equals returns a WhereClause for this field.
func (f SqlNullInt64Field) Equals(v sql.NullInt64) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullInt64Field) GreaterThan(v sql.NullInt64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullInt64Field) LessThan(v sql.NullInt64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) GreaterOrEqual(v sql.NullInt64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) LessOrEqual(v sql.NullInt64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) NotEqual(v sql.NullInt64) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullInt64Field) In(vals []sql.NullInt64) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// Float64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Float64Field string

// Equals returns a WhereClause for this field.
func (f Float64Field) Equals(v float64) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Float64Field) GreaterThan(v float64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Float64Field) LessThan(v float64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Float64Field) GreaterOrEqual(v float64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Float64Field) LessOrEqual(v float64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Float64Field) NotEqual(v float64) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f Float64Field) In(vals []float64) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullFloat64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullFloat64Field string

// Equals returns a WhereClause for this field.
func (f SqlNullFloat64Field) Equals(v sql.NullFloat64) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullFloat64Field) GreaterThan(v sql.NullFloat64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullFloat64Field) LessThan(v sql.NullFloat64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) GreaterOrEqual(v sql.NullFloat64) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) LessOrEqual(v sql.NullFloat64) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) NotEqual(v sql.NullFloat64) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullFloat64Field) In(vals []sql.NullFloat64) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// BoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type BoolField string

// Equals returns a WhereClause for this field.
func (f BoolField) Equals(v bool) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f BoolField) GreaterThan(v bool) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f BoolField) LessThan(v bool) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f BoolField) GreaterOrEqual(v bool) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f BoolField) LessOrEqual(v bool) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f BoolField) NotEqual(v bool) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f BoolField) In(vals []bool) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullBoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullBoolField string

// Equals returns a WhereClause for this field.
func (f SqlNullBoolField) Equals(v sql.NullBool) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullBoolField) GreaterThan(v sql.NullBool) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullBoolField) LessThan(v sql.NullBool) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullBoolField) GreaterOrEqual(v sql.NullBool) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullBoolField) LessOrEqual(v sql.NullBool) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullBoolField) NotEqual(v sql.NullBool) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullBoolField) In(vals []sql.NullBool) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// TimeTimeField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type TimeTimeField string

// Equals returns a WhereClause for this field.
func (f TimeTimeField) Equals(v time.Time) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f TimeTimeField) GreaterThan(v time.Time) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f TimeTimeField) LessThan(v time.Time) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f TimeTimeField) GreaterOrEqual(v time.Time) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f TimeTimeField) LessOrEqual(v time.Time) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f TimeTimeField) NotEqual(v time.Time) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f TimeTimeField) In(vals []time.Time) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// PqNullTimeField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type PqNullTimeField string

// Equals returns a WhereClause for this field.
func (f PqNullTimeField) Equals(v pq.NullTime) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f PqNullTimeField) GreaterThan(v pq.NullTime) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f PqNullTimeField) LessThan(v pq.NullTime) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f PqNullTimeField) GreaterOrEqual(v pq.NullTime) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f PqNullTimeField) LessOrEqual(v pq.NullTime) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f PqNullTimeField) NotEqual(v pq.NullTime) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f PqNullTimeField) In(vals []pq.NullTime) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// Uint32Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Uint32Field string

// Equals returns a WhereClause for this field.
func (f Uint32Field) Equals(v uint32) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Uint32Field) GreaterThan(v uint32) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Uint32Field) LessThan(v uint32) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Uint32Field) GreaterOrEqual(v uint32) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Uint32Field) LessOrEqual(v uint32) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Uint32Field) NotEqual(v uint32) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f Uint32Field) In(vals []uint32) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// UuidUUIDField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type UuidUUIDField string

// Equals returns a WhereClause for this field.
func (f UuidUUIDField) Equals(v uuid.UUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f UuidUUIDField) GreaterThan(v uuid.UUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f UuidUUIDField) LessThan(v uuid.UUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f UuidUUIDField) GreaterOrEqual(v uuid.UUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f UuidUUIDField) LessOrEqual(v uuid.UUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f UuidUUIDField) NotEqual(v uuid.UUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f UuidUUIDField) In(vals []uuid.UUID) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// UuidNullUUIDField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type UuidNullUUIDField string

// Equals returns a WhereClause for this field.
func (f UuidNullUUIDField) Equals(v uuid.NullUUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f UuidNullUUIDField) GreaterThan(v uuid.NullUUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f UuidNullUUIDField) LessThan(v uuid.NullUUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f UuidNullUUIDField) GreaterOrEqual(v uuid.NullUUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f UuidNullUUIDField) LessOrEqual(v uuid.NullUUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f UuidNullUUIDField) NotEqual(v uuid.NullUUID) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f UuidNullUUIDField) In(vals []uuid.NullUUID) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// HstoreHstoreField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type HstoreHstoreField string

// Equals returns a WhereClause for this field.
func (f HstoreHstoreField) Equals(v hstore.Hstore) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f HstoreHstoreField) GreaterThan(v hstore.Hstore) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f HstoreHstoreField) LessThan(v hstore.Hstore) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f HstoreHstoreField) GreaterOrEqual(v hstore.Hstore) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f HstoreHstoreField) LessOrEqual(v hstore.Hstore) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f HstoreHstoreField) NotEqual(v hstore.Hstore) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f HstoreHstoreField) In(vals []hstore.Hstore) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// ByteaField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type ByteaField string

// Equals returns a WhereClause for this field.
func (f ByteaField) Equals(v Bytea) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f ByteaField) GreaterThan(v Bytea) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f ByteaField) LessThan(v Bytea) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f ByteaField) GreaterOrEqual(v Bytea) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f ByteaField) LessOrEqual(v Bytea) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f ByteaField) NotEqual(v Bytea) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f ByteaField) In(vals []Bytea) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// PgtypeTstzrangeField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type PgtypeTstzrangeField string

// Equals returns a WhereClause for this field.
func (f PgtypeTstzrangeField) Equals(v pgtype.Tstzrange) Where {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f PgtypeTstzrangeField) GreaterThan(v pgtype.Tstzrange) Where {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f PgtypeTstzrangeField) LessThan(v pgtype.Tstzrange) Where {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f PgtypeTstzrangeField) GreaterOrEqual(v pgtype.Tstzrange) Where {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f PgtypeTstzrangeField) LessOrEqual(v pgtype.Tstzrange) Where {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f PgtypeTstzrangeField) NotEqual(v pgtype.Tstzrange) Where {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f PgtypeTstzrangeField) In(vals []pgtype.Tstzrange) InClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f JsonbField) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f JsonbField) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullStringField) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullStringField) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullInt64Field) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullInt64Field) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullFloat64Field) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullFloat64Field) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullBoolField) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullBoolField) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f PqNullTimeField) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f PqNullTimeField) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f UuidNullUUIDField) IsNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f UuidNullUUIDField) IsNotNull() NullClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}
